#include <iostream>
#include <string>
#include <sstream>
#include "BJ_Classes_Functions.h"

//========================================================================================================================================
//Task 2. Own endll manipulator
//========================================================================================================================================

std::ostream& endll(std::ostream &out)
{
	out << '\n' << '\n';
	out.flush();
	return out;
}

//========================================================================================================================================
//Task 3. 
//========================================================================================================================================
/*
Реализовать класс Player, который наследует от класса GenericPlayer. У этого класса будет 4 метода:
• virtual bool IsHitting() const - реализация чисто виртуальной функции базового класса.
  Метод спрашивает у пользователя, нужна ли ему еще одна карта и возвращает ответ пользователя в виде true или false.
• void Win() const- выводит на экран имя игрока и сообщение, что он выиграл.
• void Lose() const - выводит на экран имя игрока и сообщение, что он проиграл.
• void Push() const - выводит на экран имя игрока и сообщение, что он сыграл вничью.
*/


class Player : public GenericPlayer
{
public:
	Player(std::string name) : GenericPlayer(name) {};
	~Player() {};

	virtual bool IsHitting() const
	{
		std::string t;
		std::cout << "Игрок " << m_name << ", нужна ли Вам ещё карта? ";
		for (;;) //fool protection
		{
			std::cin >> t;
			if (t == "yes" || t == "Yes" || t == "y" || t == "Y" || t == "да" || t == "д" || t == "Да" || t == "Д" || t == "no" || t == "No" || t == "n" || t == "N" || t == "нет" || t == "н" || t == "Нет" || t == "Н")
				break;
			else
			{
				std::cout << "Некорректный ввод! Попробуйне снова!";
				std::cin.clear();
				std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
				std::cout << '\n' << "Нужна ли Вам ещё карта? ";
				t.clear();
			}
		}
		if ( t == "yes" || t == "Yes" || t == "y" || t == "Y" || t == "да" || t == "д" || t == "Да" || t == "Д")
			return true;
		else
			return false;
	}
	void Win() const {std::cout << "Игрок " << m_name << " выиграл!" << "\n";}
	void Lose() const { std::cout << "Игрок " << m_name << " проиграл!" << "\n"; }
	void Push() const { std::cout << "У игрока " << m_name << " и диллера очков поровну!" << "\n"; }
};

//========================================================================================================================================
//Task 4. 
//========================================================================================================================================
/*
Реализовать класс House, который представляет дилера. Этот класс наследует от класса GenericPlayer. У него есть 2 метода:
• virtual bool IsHitting() const - метод указывает, нужна ли дилеру еще одна карта. Если у дилера не больше 16 очков, 
  то он берет еще одну карту.
• void FlipFirstCard() - метод переворачивает первую карту дилера.
*/

class House : public GenericPlayer
{
public:
	House(std::string name = "Диллер") : GenericPlayer(name) {};
	~House() {};
	virtual bool IsHitting() const
	{
		if (GetValue() < 17)
			return true;
		else
			return false;
	}
	void FlipFirstCard()
	{
		m_hand[0]->Flip();
	}
};


//========================================================================================================================================
//Task 5. 
//========================================================================================================================================
/*
Написать перегрузку оператора вывода для класса Card: 
• Если карта перевернута рубашкой вверх (мы ее не видим), вывести ХХ, если мы ее видим, вывести масть и номинал карты.
• Также для класса GenericPlayer написать перегрузку оператора вывода, который должен отображать имя игрока и его карты,
  а также общую сумму очков его карт.
*/

int main()
{
	setlocale(LC_ALL, "Russian");
	system("chcp 1251");

	//========================================================================================================================================
	//Task 1. Input check
	//========================================================================================================================================
	/*
	Пример неправильных введенных строк:
	rbtrb
	nj34njkn
	1n
	*/

	{
		int inputValue;
		std::string tempStr;
		std::istringstream ss;
		for (;;)
		{
			std::cout << "Введите одно целое число: ";
			std::getline(std::cin, tempStr);
			ss.str(tempStr);
			if (ss >> inputValue && ss.eof())
				break;
			else
			{
				std::cout << "Некорректный ввод! Введите число повторно!";
				std::cin.clear();
				std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
				std::cout << '\n';
				inputValue = 0;
				ss.clear();
				tempStr.clear();
			}
		}
	}

	{
		std::cout << "first line" << endll;
		std::cout << "second line" << std::endl;
		std::cout << "final line" << std::endl;
	}

	{
		Player p1("John");
		std::cout << std::boolalpha << p1.IsHitting() << "\n";
		std::cout << std::boolalpha << p1.IsHitting() << "\n";
		House dealer;
	}

	
	return 0;
}
